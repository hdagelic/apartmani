* Frontend: jQuery + HTML: dinamički učitava sve podatke.
----------

* Backend je napisan u Flasku, ovako:
----------

   * pod URL-om /api nalaze se funkcije koje za POST i GET zahtjeve 
     vraćaju JSON-e,

   * pod / su stranice /login /register (i /) koje su praktički samo 
     html-ovi iz kojih se poslje AJAX-om učitavaju podaci.

+ pomoćna skripta ./cron.sh: služi ra refresh podataka s URL-ova.




   .. * ..   .   ALGORITAM  .  .. . * . .. 
        --------------------------


* Algoritam za računanje čišćenja izvršava se na svaku promjenu
  za sve apartmane nekog gazde, i radi ovako:

 1) Dohvati slobodna vremena za sve aparmane i posloži ih:

    AP1:  -----       ----------  --        ------------
    AP2:  ----------  ----------------  -----  ---------
    AP3:  ---------------------------- -----    --------

 2)                  |                |       |
                     |                |       |
    SRCH1 (naj-maksi | mum) -----------       |
                     |                        |
    SRCH2 -----------*------------------------  (max 2)

    .. . 
    itd ...                         


   Prvo se prelaze svi apartmani i traži se najveće maksimume
   (3 slobodna za ovaj primjer). Ako ima: odmah označi čišćenje,

   onda ide drugi pass, u kojem se traži prvi manji maksimum
   (2 slobodna) - ako ima označi čišćenje,

   itd, sve do pojedinačnih slobodnih.

   Zanimljivo:
   ----------
   
   For-petlja za SQL Alchemy objekt je jako spora, i to
   svaki put, moguće da čita iz baze non-stop.
   Tako da prepisujemo atribute u običnu listu, za algoritam.
   
   Koristimo dictionary za check svega, pa je algoritam
   brz (4 apartmana, 1 gorina raspona - oko 0.005 sekundi)
   sa "for apartman in apartmani" je oko 5 sekundi!

   Rubni uvjeti su malo zeznuti za programirati ali
   sad valjda radi i to!



  . * . * ..   API   . * . .. . ..
      -----------------------

   ***  /api/login ***

   .. .  Radi login i vraća JWT token  .. . .

   POST:   uid*, pass*    
    OUT:   token, message  (JSON)

  

   ***  /api/register ***

   . . .. Radi registraciju .. . .

   POST:  uid*, pass*, pass2*, email  (POST)
    OUT:  message  (JSON)
   


     . . . .. .za sve linkove ispod ... .. ..
     require: Auth Bearer / JWT (sub=username)
   ---------------------------------------------


    ***  /api/calendar/range  ***

    . .. . dohvati rezervacije i čišćenje od - do .. . .
      
    GET:

      start  .. . start datum: Y-M-D
      end  . . .. end datum: Y-M-D) 
      id  .. .  . id apartmana

    OUT: 
   
     reservations: [(start, end, gost), ...)]
         cleaning: [(start, end), .. . ]   (JSON)

  
    ***  /api/calendar/file  ***

    . .. . učitava .ics kalendar iz fajla (+ računa čišćenje) .. . .
    
    POST: file, id*
    OUT:  message (JSON)
  

    ***  /api/calendar/url  ***

    . .. . učitava .ics kalendar iz url-a (+ računa čišćenje) .. . .

    POST: url, id*
    OUT:  message (JSON)


       
   ***  /api/main/load  ***
   
    . .. . dohvati sve apartmane za jednog gazdu .. .

    GET: id . .. id apartmana
    OUT: apartments : [ lista aparrmana ], user, message  (JSON)


    
   ***  /api/main/new  ***
   
   . . .. dodaje novi apartman . . .. 

    POST: name*, comment, image
     OUT: message (JSON)
   


   *** /api/main/delete ***
 
    .. . briše apartman (+ računa čišćenje) . ... 

    POST: id . .. id apartmana
    OUT:  message   (JSON)


